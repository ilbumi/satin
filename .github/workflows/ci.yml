name: CI/CD Pipeline

on:
  push:
    branches: [ "main", "dev" ]
  pull_request:
    branches: [ "main", "dev" ]
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.13'
  NODE_VERSION: '24'
  UV_VERSION: '0.8.3'

jobs:
  # Detect changes to optimize CI execution
  changes:
    runs-on: ubuntu-latest
    outputs:
      backend: ${{ steps.changes.outputs.backend }}
      frontend: ${{ steps.changes.outputs.frontend }}
      docker: ${{ steps.changes.outputs.docker }}
    steps:
      - uses: actions/checkout@v4
      - uses: dorny/paths-filter@v3
        id: changes
        with:
          filters: |
            backend:
              - 'src/**'
              - 'tests/**'
              - 'pyproject.toml'
              - 'uv.lock'
              - '.github/**'
            frontend:
              - 'frontend/**'
              - '.github/**'
            docker:
              - 'docker/**'
              - 'docker-compose*.yml'
              - '.dockerignore'
              - '.github/**'

  backend:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true

      - name: Install dependencies
        run: uv sync --group dev

      - name: Format check with ruff
        run: uv run ruff format --check .

      - name: Lint with ruff
        run: uv run ruff check .

      - name: Sort imports with ssort
        run: uv run ssort --check .

      - name: Type check with mypy
        run: uv run mypy src
        continue-on-error: true

      - name: Test with pytest
        run: uv run pytest --cov=src --cov-report=xml --cov-report=term-missing -x

      - name: Upload backend coverage to Codecov
        uses: codecov/codecov-action@v5
        if: always()
        with:
          file: ./coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

  # Documentation build
  docs:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.backend == 'true' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true

      - name: Install dependencies
        run: uv sync --group dev

      - name: Build documentation
        run: make docs

      - name: Upload docs artifacts
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: docs/build/html/
          retention-days: 7

  frontend:
    runs-on: ubuntu-latest
    needs: changes
    if: needs.changes.outputs.frontend == 'true' || github.event_name == 'workflow_dispatch'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        working-directory: ./frontend
        run: pnpm install --frozen-lockfile

      - name: Install Playwright
        working-directory: ./frontend
        run: pnpm exec playwright install --with-deps

      - name: Format check with prettier
        working-directory: ./frontend
        run: pnpm prettier --check .

      - name: Lint with eslint
        working-directory: ./frontend
        run: pnpm lint

      - name: Type check with svelte-check
        working-directory: ./frontend
        run: pnpm check


      - name: Run unit tests with coverage
        working-directory: ./frontend
        run: pnpm run test:unit --coverage

      - name: Build frontend
        working-directory: ./frontend
        run: pnpm build

      - name: Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v5
        if: always()
        with:
          file: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: false

      - name: Upload frontend coverage artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: frontend-coverage
          path: frontend/coverage/
          retention-days: 7

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build/
          retention-days: 7

  e2e:
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    if: always() && needs.backend.result == 'success' && needs.frontend.result == 'success'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install uv
        uses: astral-sh/setup-uv@v6
        with:
          version: ${{ env.UV_VERSION }}
          enable-cache: true

      - name: Install backend dependencies
        run: uv sync --group dev

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        working-directory: ./frontend
        run: npx playwright install chromium --with-deps

      - name: Run E2E tests
        working-directory: ./frontend
        run: pnpm run test:e2e

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: frontend/playwright-report/
          retention-days: 30

  # Security scanning
  security:
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: python, javascript-typescript

      - name: Autobuild
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3

  # Docker builds and tests
  docker:
    runs-on: ubuntu-latest
    needs: [e2e]
    if: always() && (needs.e2e.result == 'success')
    strategy:
      matrix:
        service: [backend, frontend]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./docker/Dockerfile.${{ matrix.service }}
          push: false
          load: true
          tags: satin-${{ matrix.service }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image
        run: |
          docker run --rm -d --name test-${{ matrix.service }} satin-${{ matrix.service }}:latest
          sleep 10
          if [ "${{ matrix.service }}" = "backend" ]; then
            docker exec test-${{ matrix.service }} curl -f http://localhost:8000/health || exit 1
          else
            docker exec test-${{ matrix.service }} curl -f http://localhost:3000/ || exit 1
          fi
          docker stop test-${{ matrix.service }}

      - name: Run Trivy vulnerability scanner on image
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: satin-${{ matrix.service }}:latest
          format: 'sarif'
          output: 'trivy-image-results.sarif'

      - name: Upload Trivy image scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-image-results.sarif'

  # Integration tests with Docker Compose
  integration:
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    if: always() && needs.backend.result == 'success' && needs.frontend.result == 'success'
    steps:
      - uses: actions/checkout@v4

      - name: Create test environment file
        run: |
          cat > .env.test << EOF
          MONGO_USERNAME=testuser
          MONGO_PASSWORD=testpass
          MONGO_DATABASE=satin_test
          MONGO_HOST=mongodb
          MONGO_PORT=27017
          MONGO_DSN=mongodb://testuser:testpass@mongodb:27017/satin_test?authSource=admin
          BACKEND_PORT=8000
          FRONTEND_PORT=3000
          CORS_ORIGINS='["http://localhost:3000"]'
          VITE_BACKEND_URL=http://localhost:8000
          ENVIRONMENT=test
          LOG_LEVEL=debug
          EOF

      - name: Start services with Docker Compose
        run: |
          docker compose -f docker-compose.yml --env-file .env.test up -d --build
          sleep 30

      - name: Wait for services to be healthy
        run: |
          timeout 120 bash -c 'until docker compose ps | grep -q "healthy"; do sleep 5; done'

      - name: Run integration tests
        run: |
          # Test backend health
          curl -f http://localhost:8000/health

          # Test frontend accessibility
          curl -f http://localhost:3000/

          # Test GraphQL endpoint
          curl -X POST http://localhost:8000/graphql \
            -H "Content-Type: application/json" \
            -d '{"query": "{ __schema { types { name } } }"}' \
            | grep -q "types"

      - name: Collect service logs
        if: failure()
        run: |
          echo "=== Backend logs ==="
          docker compose logs backend
          echo "=== Frontend logs ==="
          docker compose logs frontend
          echo "=== MongoDB logs ==="
          docker compose logs mongodb

      - name: Stop services
        if: always()
        run: docker compose down -v

  # Quality gates
  quality-gate:
    runs-on: ubuntu-latest
    needs: [backend, frontend, e2e, docs, security]
    if: always()
    steps:
      - name: Check all jobs status
        run: |
          echo "Backend: ${{ needs.backend.result }}"
          echo "Frontend: ${{ needs.frontend.result }}"
          echo "E2E: ${{ needs.e2e.result }}"
          echo "Docs: ${{ needs.docs.result }}"
          echo "Security: ${{ needs.security.result }}"

          if [[ "${{ needs.backend.result }}" != "success" && "${{ needs.backend.result }}" != "skipped" ]]; then
            echo "Backend job failed"
            exit 1
          fi

          if [[ "${{ needs.frontend.result }}" != "success" && "${{ needs.frontend.result }}" != "skipped" ]]; then
            echo "Frontend job failed"
            exit 1
          fi

          if [[ "${{ needs.e2e.result }}" != "success" && "${{ needs.e2e.result }}" != "skipped" ]]; then
            echo "E2E tests job failed"
            exit 1
          fi

          if [[ "${{ needs.docs.result }}" != "success" && "${{ needs.docs.result }}" != "skipped" ]]; then
            echo "Documentation build failed"
            exit 1
          fi

          if [[ "${{ needs.security.result }}" != "success" ]]; then
            echo "Security scan failed"
            exit 1
          fi

          echo "All quality gates passed!"
