# Multi-stage build for optimized production image
FROM node:24-alpine AS builder

# Set environment variables
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH" \
    NODE_ENV=production

# Install pnpm
RUN corepack enable

# Install system dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++

# Set working directory
WORKDIR /app

# Copy package files
COPY frontend/package.json frontend/pnpm-lock.yaml ./

# Install dependencies
RUN pnpm install --frozen-lockfile

# Copy source code
COPY frontend/ ./

# Build the application
RUN pnpm build


# Production stage
FROM node:24-alpine AS production

# Set environment variables
ENV PNPM_HOME="/pnpm"
ENV NODE_ENV=production \
    PATH="$PNPM_HOME:$PATH"

# Enable pnpm
RUN corepack enable

# Install only runtime dependencies
RUN apk add --no-cache \
    curl

# Create non-root user
RUN addgroup -g 1001 appuser && \
    adduser -u 1001 -G appuser -s /bin/sh -D appuser

# Set working directory
WORKDIR /app

# Copy package files for production dependencies
COPY frontend/package.json frontend/pnpm-lock.yaml ./

# Install only production dependencies
RUN pnpm install --prod --frozen-lockfile && pnpm store prune

# Copy built application from builder stage
COPY --from=builder --chown=appuser:appuser /app/build ./build
COPY --from=builder --chown=appuser:appuser /app/package.json ./package.json

# Change to non-root user
USER appuser

# Expose port
EXPOSE 3000

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:3000/ || exit 1

# Command to run the application
CMD ["node", "build/index.js"]
