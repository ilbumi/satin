// This file will be generated by GraphQL Code Generator
// Run 'pnpm codegen' to generate types from your GraphQL schema and operations

export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = {
	[_ in K]?: never;
};
export type Incremental<T> =
	| T
	| { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };

// Placeholder types - will be replaced when schema is available
export interface Image {
	id: string;
	url: string;
	width?: number;
	height?: number;
	format?: string;
	status: string;
	createdAt: string;
	updatedAt: string;
}

export interface Annotation {
	id: string;
	x: number;
	y: number;
	width: number;
	height: number;
	description?: string;
	mlDescription?: string;
	confidence?: number;
	source: string;
	imageId: string;
	createdAt: string;
	updatedAt: string;
}

export interface Tag {
	id: string;
	name: string;
	color: string;
	fullPath: string;
	parentId?: string;
	usageCount: number;
	createdAt: string;
	updatedAt: string;
}
